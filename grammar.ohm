DPLA {
  Expr = AddExpr | Assignment | CodeBlock | Function | symbol | type 

  type = number | string
  number = float | int
  int = digit+
  float = digit+ "." digit+
  string = "\"" (~"\"" any)* "\""

  AddExpr = AddExpr "+" MulExpr -- plus
  | AddExpr "-" MulExpr -- minus
  | MulExpr
  MulExpr = MulExpr "*" PriExpr -- times
  | MulExpr "/" PriExpr -- divide
  | MulExpr "%" PriExpr -- modulus
  | MulExpr "^" PriExpr -- power
  | PriExpr
  PriExpr = "(" AddExpr ")" -- paren
  | number

  symbol = (letter | "_") (letter | digit | "_")*
  Assignment = symbol "=" Expr

  Function = symbol  "[" Arguments "]"
  Arguments = ListOf<Expr,",">
  CodeBlock = "(" Expr (Expr | "\n")* ")"
}